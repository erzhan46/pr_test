name: Environment deployment

on:
  push:
    tags:
      - 'release-*-learning-start'
      - 'release-*-engineering-start'
      - 'release-*-customer-start'

jobs:

  identify_environment:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ github.token }}
    outputs:
      environment: ${{ steps.get_environment.outputs.environment }}
      release_tag: ${{ steps.get_tags.outputs.release_tag }}
      code_tag: ${{ steps.get_tags.outputs.code_tag }}
      config_tag: ${{ steps.get_tags.outputs.config_tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ssh-key: "${{ secrets.COMMIT_KEY }}"
      - name: Get relevant tags
        id: get_tags
        run: |
          git describe --tags --match='release-[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*' --exclude='release-[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*-*' --exact-match  ${{ github.sha }} 2>/dev/null || echo ""
          RELEASE_TAG=$(git describe --tags --match='release-[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*' --exclude='release-[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*-*' --exact-match  ${{ github.sha }} 2>/dev/null || echo "")
          if [[ -z "${RELEASE_TAG}" ]]; then
            echo "Release version tag is not set - Exiting"
            exit 1
          fi
          git describe --tags --match='release-[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*-code' --exact-match  ${{ github.sha }} 2>/dev/null || echo ""
          git describe --tags --match='release-[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*-config' --exact-match  ${{ github.sha }} 2>/dev/null || echo ""
          CODE_TAG=$(git describe --tags --match='release-[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*-code' --exact-match  ${{ github.sha }} 2>/dev/null || echo "")
          CONFIG_TAG=$(git describe --tags --match='release-[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*-config' --exact-match  ${{ github.sha }} 2>/dev/null || echo "")
          if [[ -z "${CODE_TAG}" && -z "${CONFIG_TAG}" ]]; then
            echo "Code or configuration tag is not set - Exiting"
            exit 1
          fi
          echo "::set-output name=release_tag::${RELEASE_TAG}"
          echo "::set-output name=code_tag::${CODE_TAG}"
          echo "::set-output name=config_tag::${CONFIG_TAG}"
      - name: Identify environment
        id: get_environment
        run: |
          ENVIRONMENT="${{ github.ref }}"
          ENVIRONMENT=${ENVIRONMENT%-start}
          ENVIRONMENT=${ENVIRONMENT#refs/tags/release-[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*-}
          echo ${ENVIRONMENT}
          if [[ -z "${ENVIRONMENT}" ]]; then
            echo "Cannot identify environment - check *-environment-start tag - Exiting"
            exit 1
          fi
          echo "::set-output name=environment::${ENVIRONMENT}"


  deploy_environment:
    runs-on: ubuntu-latest
    needs: identify_environment
    defaults:
      run:
        shell: bash
    env:
      GITHUB_TOKEN: ${{ github.token }}
      CLUSTER_WORKFLOW: "cluster_deployment.yaml"
      DEPLOYMENT_ENVIRONMENT: ${{ needs.identify_environment.outputs.environment }}
      RELEASE_VERSION: ${{ needs.identify_environment.outputs.release_tag }}
      CODE_TAG: ${{ needs.identify_environment.outputs.code_tag }}
      CONFIG_TAG: ${{ needs.identify_environment.outputs.config_tag }}
    environment: ${{ needs.identify_environment.outputs.environment }}
    concurrency: ${{ needs.identify_environment.outputs.environment }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ssh-key: "${{ secrets.COMMIT_KEY }}"
      - name: Git config
        run: |
          git config --global user.email "infra-pipeline@dh.com"
          git config --global user.name "Infrastructure Pipeline"
          #      - run: |
          #git fetch --prune --tags origin
      - name: Debug
        run: |
          echo "Environment: ${DEPLOYMENT_ENVIRONMENT}"
          echo "Release version: ${RELEASE_VERSION}"
          echo "Code tag: ${CODE_TAG}"
          echo "Config tag: ${CONFIG_TAG}"
      - name: Get workflow ID
        id: get_workflow
        run: |
          WORKFLOW_ID=$(curl -s "https://api.github.com/repos/erzhan46/pr_test/actions/workflows" | jq -c '.workflows[] | select( .path | contains("'${CLUSTER_WORKFLOW}'")) | .id')
          echo "Workflow Id: ${WORKFLOW_ID}"
          if [[ -z "${WORKFLOW_ID}" ]]; then
            echo "Could not find workflow ${CLUSTER_WORKFLOW} - Exiting"
            exit 1
          fi
          echo "::set-output name=id::${WORKFLOW_ID}"
      - name: Cluster deployment
        id: cluster_deployment
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          cat promotion.yaml | yq e '.environments.'${DEPLOYMENT_ENVIRONMENT}'[].priority' - | sort -u | while read PRIORITY
          do
            echo "Processing priority ${PRIORITY} clusters"
            ID_ARR=()
            RUN_ARR=()
            # Submitting workflow runs for each cluster
            for CLUSTERID in $(cat promotion.yaml| yq  e '[.environments.learning.[] | select(.priority == "'${PRIORITY}'")] as $clusters | $clusters[].id' -)
            do
              ZONE=$(cat promotion.yaml| yq  e '.environments.learning.[] | select(.id == "'${CLUSTERID}'") as $cluster | $cluster.zone' -)
              WORKSPACE=$(cat promotion.yaml| yq  e '.environments.learning.[] | select(.id == "'${CLUSTERID}'") as $cluster | $cluster.workspace' -)
              TFVARS_FILE=$(cat promotion.yaml| yq  e '.environments.learning.[] | select(.id == "'${CLUSTERID}'") as $cluster | $cluster.tfvars_file' -)
              echo "Cluster Id: ${CLUSTERID}"
              echo "Zone: ${ZONE}"
              echo "Workspace: ${WORKSPACE}"
              echo "Tfvars file: ${TFVARS_FILE}"
              
              WORKFLOW_ID=${{ steps.get_workflow.outputs.id }}
              curl -s -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${PAT_TOKEN}" \
                  "https://api.github.com/repos/erzhan46/pr_test/actions/workflows/${WORKFLOW_ID}/dispatches" \
                  -d '{"ref": "'"${{ github.ref }}"'","inputs": { "zone": "'"${ZONE}"'", "workspace": "'"${WORKSPACE}"'", "tfvars_file": "'"${TFVARS_FILE}"'" }}'
              sleep 5 # just in case
              RUN_ID=$(curl -s "https://api.github.com/repos/erzhan46/pr_test/actions/runs?per_page=1" -H "Authorization: token ${GITHUB_TOKEN}" | jq '.workflow_runs[].id')
              echo "Run ID: ${RUN_ID}"
              ID_ARR+=( ${ZONE} )
              RUN_ARR+=( ${RUN_ID} )

            done

            # Wait for completion
            DONE=false
            FAILED=false
            while [[ ${DONE} == false ]]
            do
              DONE=true
              # Check workflow run status
              for ARR_I in ${!ID_ARR[@]}
              do
                ID=${ID_ARR[${ARR_I}]}
                RUN=${RUN_ARR[${ARR_I}]}
                echo "Checking id: ${ID} Run:${RUN}"
                STATUS=$(curl -s "https://api.github.com/repos/erzhan46/pr_test/actions/runs/${RUN}"  -H "Authorization: token ${GITHUB_TOKEN}" | jq '.status' | tr -d '"')
                CONCLUSION=$(curl -s "https://api.github.com/repos/erzhan46/pr_test/actions/runs/${RUN}"  -H "Authorization: token ${GITHUB_TOKEN}" | jq '.conclusion' | tr -d '"')
                if [[ ${STATUS} != "completed" ]]; then
                  DONE=false
                  echo "Still running"
                fi
                if [[ ${STATUS} == "completed" && ${CONCLUSION} != "success" ]]; then
                  FAILED=true
                  echo "Cluster deployment failed. Id: ${ID} Run: ${RUN}"
                fi
              done
              sleep 5
            done

            if [[ ${FAILED} == true ]]; then
              echo "One of the cluster deployment jobs failed - Exiting"
              exit 1
            fi

          done


        #1. Process tag - get environment
        #2. Scan promotion.yaml - filter environment - get priorities
        #cat promotion.yaml | yq e '.environments.learning[].priority' - | sort -u
        #3. For each priority
        #Get clusters
        #cat promotion.yaml| yq -I4 e '[.environments.learning.[] | select(.priority == "1")]' -
        #All clusters:
        #  submit workflow run:
        #    gh workflow run cluster_deploy.yaml
        #  Get run id: 
        #    curl "https://api.github.com/repos/erzhan46/pr_test/actions/runs?per_page=1"
        #  Check run completion:
        #    curl "https://api.github.com/repos/erzhan46/pr_test/actions/runs/1262486783"
        #  Once all run for priority completed
        #    If at least one job failed - report and stop


  context-debug:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
        run: echo "$MATRIX_CONTEXT"


