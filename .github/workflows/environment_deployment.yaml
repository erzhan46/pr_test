name: Environment deployment

on:
  push:
    tags:
      - 'release-*-learning-start'
      - 'release-*-engineering-start'
      - 'release-*-customer-start'

jobs:

  deploy_environment:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 250
      - name: Git config
        run: |
          git config --global user.email "infra-pipeline@dh.com"
          git config --global user.name "Infrastructure Pipeline"
      - run: |
          git fetch --prune --tags origin
      - name: Get relevant tags
        id: get_tags
        run: |
          RELEASE_TAG=$(git describe --tags --match="release-[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" --exact-match  ${{ github.sha }} 2>/dev/null)
          if [[ -z "${RELEASE_TAG}" ]]; then
            echo "Release version tag is not set - Exiting"
            exit 1
          fi
          CODE_TAG=$(git describe --tags --match="code" --exact-match  ${{ github.sha }} 2>/dev/null)
          CONFIG_TAG=$(git describe --tags --match="config" --exact-match  ${{ github.sha }} 2>/dev/null)
          if [[ -z "${CODE_TAG}" && -z "${CONFIG_TAG}" ]]; then
            echo "Code or configuration tag is not set - Exiting"
            exit 1
          fi
          echo "::set-output name=release_tag::${RELEASE_TAG}"
          echo "::set-output name=code_tag::${CODE_TAG}"
          echo "::set-output name=config_tag::${CONFIG_TAG}"
      - name: Identify environment
        id: get_environment
        run: |
          ENVIRONMENT="${{ github.ref }}"
          ENVIRONMENT=${ENVIRONMENT%-start}
          echo ${ENVIRONMENT}
          echo "::set-output name=environment::${ENVIRONMENT}"



        #1. Process tag - get environment
        #2. Scan promotion.yaml - filter environment - get priorities
        #cat promotion.yaml | yq e '.environments.learning[].priority' - | sort -u
        #3. For each priority
        #Get clusters
        #cat promotion.yaml| yq -I4 e '[.environments.learning.[] | select(.priority == "1")]' -
        #All clusters:
        #  submit workflow run:
        #    gh workflow run cluster_deploy.yaml
        #  Get run id: 
        #    curl "https://api.github.com/repos/erzhan46/pr_test/actions/runs?per_page=1"
        #  Check run completion:
        #    curl "https://api.github.com/repos/erzhan46/pr_test/actions/runs/1262486783"
        #  Once all run for priority completed
        #    If at least one job failed - report and stop
