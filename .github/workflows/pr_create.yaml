name: Pull request create or resync


on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]


jobs:
  commit_validation:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - run: |
          git fetch --prune --tags origin 

      - name: Get commits in PR
        id: get_commits
        run: |
          curl -s ${COMMIT_URL} -H "Authorization: token ${GITHUB_TOKEN}" | jq '.[].commit.message'
          COMMIT_LIST=$(curl -s ${COMMIT_URL} -H "Authorization: token ${GITHUB_TOKEN}" | jq '.[].sha')
          COMMIT_LIST="${COMMIT_LIST//'%'/'%25'}"
          COMMIT_LIST="${COMMIT_LIST//$'\n'/'%0A'}"
          COMMIT_LIST="${COMMIT_LIST//$'\r'/'%0D'}"
          echo "::set-output name=commits::${COMMIT_LIST}"
        env:
          COMMIT_URL: "${{ github.event.pull_request._links.commits.href }}?per_page=250"

      - name: Get code version tag in scope of PR (latest/if any)
        id: get_latest_code_tag
        run: |
          TAGS=$(echo "${{ steps.get_commits.outputs.commits }}" | while read COMMIT; do git describe --tags --match="v[0-9]*\.[0-9]*\.[0-9]*" --exact-match  ${COMMIT} 2>/dev/null || true; done)
          echo "::set-output name=latest_code_tag::${TAGS}"

      - name: Get changed files
        id: get_changed_files
        run: |
          DIFF=$(git diff --name-only origin/${{ github.base_ref }} ${{ github.sha }})
          echo "Diff between ${{ github.base_ref }} and ${{ github.sha }}"
          echo "$DIFF"
          DIFF="${DIFF//'%'/'%25'}"
          DIFF="${DIFF//$'\n'/'%0A'}"
          DIFF="${DIFF//$'\r'/'%0D'}"
          echo "::set-output name=files::${DIFF}"

      - name: Files scope
        id: files_scope
        run: |
          CODE_FILES=$(echo "${{ steps.get_changed_files.outputs.files }}" | while read FILE; do echo ${FILE}|grep "^code\/.*\.tf$" || true; done)
          echo "Code files:${CODE_FILES}"
          CODE_FILES="${CODE_FILES//'%'/'%25'}"
          CODE_FILES="${CODE_FILES//$'\n'/'%0A'}"
          CODE_FILES="${CODE_FILES//$'\r'/'%0D'}"
          echo "::set-output name=code_files::${CODE_FILES}"
          if [[ -n "${CODE_FILES}" ]]; then
            echo "::set-output name=code_present::yes"
          fi
          VERSION_FILES=$(echo "${{ steps.get_changed_files.outputs.files }}" | while read FILE; do echo ${FILE}|grep "^code\/version.json" || true; done)
          echo "Code files:${VERSION_FILES}"
          VERSION_FILES="${VERSION_FILES//'%'/'%25'}"
          VERSION_FILES="${VERSION_FILES//$'\n'/'%0A'}"
          VERSION_FILES="${VERSION_FILES//$'\r'/'%0D'}"
          echo "::set-output name=version_files::${VERSION_FILES}"
          if [[ -n "${VERSION_FILES}" ]]; then
            echo "::set-output name=version_present::yes"
          fi
          CONF_FILES=$(echo "${{ steps.get_changed_files.outputs.files }}" | while read FILE; do echo ${FILE}|grep "^config\/*" || true; done)
          echo "Configuration files:${CONF_FILES}"
          CONF_FILES="${CONF_FILES//'%'/'%25'}"
          CONF_FILES="${CONF_FILES//$'\n'/'%0A'}"
          CONF_FILES="${CONF_FILES//$'\r'/'%0D'}"
          echo "::set-output name=conf_files::${CONF_FILES}"
          if [[ -n "${CONF_FILES}" ]]; then
            echo "::set-output name=conf_present::yes"
          fi
          PROMO_FILES=$(echo "${{ steps.get_changed_files.outputs.files }}" | while read FILE; do echo ${FILE}|grep "^promotion.yaml$" || true; done)
          echo "Promotion file:${PROMO_FILES}"
          PROMO_FILES="${PROMO_FILES//'%'/'%25'}"
          PROMO_FILES="${PROMO_FILES//$'\n'/'%0A'}"
          PROMO_FILES="${PROMO_FILES//$'\r'/'%0D'}"
          echo "::set-output name=promo_files::${PROMO_FILES}"
          if [[ -n "${PROMO_FILES}" ]]; then
            echo "::set-output name=promo_present::yes"
          fi
          MODULES_FILES=$(echo "${{ steps.get_changed_files.outputs.files }}" | while read FILE; do echo ${FILE}|grep "^modules\/*" || true; done)
          echo "Modules files:${MODULES_FILES}"
          MODULES_FILES="${MODULES_FILES//'%'/'%25'}"
          MODULES_FILES="${MODULES_FILES//$'\n'/'%0A'}"
          MODULES_FILES="${MODULES_FILES//$'\r'/'%0D'}"
          echo "::set-output name=modules_files::${MODULES_FILES}"
          if [[ -n "${MODULES_FILES}" ]]; then
            echo "::set-output name=modules_present::yes"
          fi
          WORKFLOW_FILES=$(echo "${{ steps.get_changed_files.outputs.files }}" | while read FILE; do echo ${FILE}|grep "^\.github\/workflows\/*" || true; done)
          echo "Workflow files:${WORKFLOW_FILES}"
          WORKFLOW_FILES="${WORKFLOW_FILES//'%'/'%25'}"
          WORKFLOW_FILES="${WORKFLOW_FILES//$'\n'/'%0A'}"
          WORKFLOW_FILES="${WORKFLOW_FILES//$'\r'/'%0D'}"
          echo "::set-output name=workflow_files::${WORKFLOW_FILES}"
          if [[ -n "${WORKFLOW_FILES}" ]]; then
            echo "::set-output name=workflow_present::yes"
          fi

      - name: Tags overall
        id: tags
        run: |
          echo "latest code tag in current PR: ${{ steps.get_latest_code_tag.outputs.latest_code_tag }}"
          LATEST_CODE_TAG=$(git describe --tags --match="v[0-9]*\.[0-9]*\.[0-9]*" $(git rev-list --tags="v[0-9]*\.[0-9]*\.[0-9]*" --max-count=1) 2>/dev/null || echo "")
          echo "latest code tag overall:       ${LATEST_CODE_TAG}"
          echo "::set-output name=latest_code_tag_overall::${LATEST_CODE_TAG}"
          LATEST_RELEASE_TAG=$(git describe --tags --match='release-[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*' --exclude='release-[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*-*' $(git rev-list --tags='release-[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*' --exclude='release-[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*-*' --max-count=1) 2>/dev/null || echo "")
          echo "latest release tag overall:    ${LATEST_RELEASE_TAG}"
          echo "::set-output name=latest_release_tag_overall::${LATEST_RELEASE_TAG}"

      - name: Check code version file presense
        id: version_file
        run: |
          if [[ "${{ steps.files_scope.outputs.code_present }}" == "yes" ]]; then
            if [[ "${{ steps.files_scope.outputs.version_present }}" != "yes" ]]; then
              echo "Pull request should updates to the version.json file if code files are changed"
              echo "Files changed: ${{ steps.files_scope.outputs.code_files }}"
              exit 1
            fi
            MAJOR=${cat "${{ steps.files_scope.outputs.version_files }}" | jq '.major'} 
            MINOR=${cat "${{ steps.files_scope.outputs.version_files }}" | jq '.minor'} 
            PATCH=${cat "${{ steps.files_scope.outputs.version_files }}" | jq '.patch'} 
            CODE_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
            echo "Code version file presense check passed"
            echo "Files changed: ${{ steps.files_scope.outputs.code_files }}"
            echo "Code version: ${CODE_VERSION}"
            echo "::set-output name=code_version::${CODE_VERSION}"
          fi

      - name: Validate code version number
        id: validate_code_version
        run: |
          if [[ "${{ steps.files_scope.outputs.code_present }}" == "yes" ]]; then
            if [[ -n "${{ steps.get_latest_code_tag.outputs.latest_code_tag }}" ]]; then
              if [[ "${{ steps.get_latest_code_tag.outputs.latest_code_tag }}" != "${{ steps.version_file.output.code_version }}" ]]; then
                echo "Pull request commit already tagged with code version and it does not match code version in version.json - exiting"
                echo "Pull request commit tag:      ${{ steps.get_latest_code_tag.outputs.latest_code_tag }}"
                echo "Code version in version.json: ${{ steps.version_file.  output.code_version }}"
                echo "Pull request commit code version commit tagging is no longer required - use version.json to track code version"
                exit 1
              fi
            else
              LATEST_CODE_TAG="${{ steps.tags.output.latest_code_tag_overall }}"
              CODE_VERSION="${{ steps.version_file.output.code_version }}"
              LATEST_CODE_TAG=${LATEST_CODE_TAG#v}
              CODE_VERSION=${CODE_VERSION#v}
              ARR_LATEST_CODE_TAG=(${LATEST_CODE_TAG//./ })
              ARR_CODE_VERSION=(${CODE_VERSION//./ })
              CMP_RESULT=$(for ARR_ID in ${!ARR_CODE_VERSION[@]}; do NUM1=${ARR_LATEST_CODE_TAG[${ARR_ID}]}; NUM2=${ARR_CODE_VERSION[${ARR_ID}]}; if [[ ${NUM1} -gt ${NUM2} ]]; then echo 1; break; fi; if [[ ${NUM1} -lt ${NUM2} ]]; then echo -1; break; fi; done)
              if [[ -z "${CMP_RESULT}" || ${CMP_RESULT} == "1" ]]; then
                echo "Code version in version.json file should be greater than latest code version in the repository"
                echo "Code version in version.json:       ${CODE_VERSION}"
                echo "Code version tag in the repository: ${LATEST_CODE_TAG}"
                exit 1
              fi
            fi
          fi

      - name: Check that github workflow changes are separate from code/configuration
        run: |
          if [[ ( "${{ steps.files_scope.outputs.code_present }}" == "yes" || "${{ steps.files_scope.outputs.conf_present }}" == "yes" || "${{ steps.files_scope.outputs.modules_present }}" == "yes" || "${{ steps.files_scope.outputs.promo_present }}" == "yes" ) && "${{ steps.files_scope.outputs.workflow_present }}" == "yes" ]]; then
            echo "Pull request should not contain workflow modifications together with code/configuration modifications"
            echo "Code files changed: ${{ steps.files_scope.outputs.code_files }}"
            echo "Modules files changed: ${{ steps.files_cope.outputs.modules_files }}"
            echo "Configuration files changed: ${{ steps.files_scope.outputs.conf_files }}"
            echo "Promotion file changed: ${{ steps.files_scope.outputs.promo_files }}"
            echo "Workflow files changed: ${{ steps.files_scope.outputs.workflow_files }}"
            exit 1
          else
            echo "Workflow separation check passed"
            echo "Code files changed: ${{ steps.files_scope.outputs.code_files }}"
            echo "Modules files changed: ${{ steps.files_cope.outputs.modules_files }}"
            echo "Configuration files changed: ${{ steps.files_scope.outputs.conf_files }}"
            echo "Promotion file changed: ${{ steps.files_scope.outputs.promo_files }}"
            echo "Workflow files changed: ${{ steps.files_scope.outputs.workflow_files }}"
          fi


  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 250

      - run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*

      - name: Get changed files
        id: file_changes
        run: |
          DIFF=$(git diff --name-only origin/${{ github.base_ref }} ${{ github.sha }})
          echo "Diff between ${{ github.base_ref }} and ${{ github.sha }}"
          echo "$DIFF"
          echo "::set-output name=files::$( echo "$DIFF" | xargs echo )"    

      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Run pre-commit
        uses: pre-commit/action@v2.0.0
        env:
          SKIP: no-commit-to-branch
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          extra_args: --color=always --show-diff-on-failure --files ${{ steps.file_changes.outputs.files }}
        

  context-debug:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
        run: echo "$MATRIX_CONTEXT"

