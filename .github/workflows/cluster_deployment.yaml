name: Cluster deployment

on:
  workflow_dispatch:
    branches:
      - main
    inputs:
      zone:
        description: 'Cluster name'
        required: true
      workspace:
        description: 'Terraform cloud workspace'
        required: true
      tfvars_file:
        description: 'Path and file name for tfvars file to be used for deployment'
        required: true

jobs:
  test1:
    runs-on: ubuntu-latest
    env:
      ZONE: ${{ github.event.inputs.zone }}
      WORKSPACE: ${{ github.event.inputs.workspace }}
      TFVARS_FILE: ${{ github.event.inputs.tfvars_file }}
    steps:
      - run: |
          echo "Job started"
          echo "Zone: ${ZONE}"
          echo "Workspace: ${WORKSPACE}"
          echo "Tfvars file: ${TFVARS_FILE}"
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ssh-key: "${{ secrets.COMMIT_KEY }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve

