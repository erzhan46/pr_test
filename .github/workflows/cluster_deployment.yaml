name: Cluster deployment

on:
  workflow_dispatch:
    branches:
      - main
    inputs:
      zone:
        description: 'Cluster name'
        required: true
      workspace:
        description: 'Terraform cloud workspace'
        required: true
      tfvars_file:
        description: 'Path and file name for tfvars file to be used for deployment'
        required: true
      release-version:
        description: 'Current release version'
        required: true

jobs:
  cluster_deploy:
    runs-on: ubuntu-latest
    env:
      ZONE: ${{ github.event.inputs.zone }}
      WORKSPACE: ${{ github.event.inputs.workspace }}
      TFVARS_FILE: ${{ github.event.inputs.tfvars_file }}
      RELEASE_VERSION: ${{ github.event.inputs.release-version }}
      ORGANIZATION: erzhan467
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ssh-key: "${{ secrets.COMMIT_KEY }}"

      - name: Git config
        run: |
          git config --global user.email "infra-pipeline@dh.com"
          git config --global user.name "Infrastructure Pipeline"

      - run: |
          echo "Job started"
          echo "Zone: ${ZONE}"
          echo "Workspace: ${WORKSPACE}"
          echo "Tfvars file: ${TFVARS_FILE}"
          cp code/* .
          cp ${TFVARS_FILE} ./terraform.auto.tfvars
          git tag -a "${RELEASE_VERSION}-${ZONE}-start" -m "Deployment start in learning environment" ${{ github.sha }}
          git push origin "${RELEASE_VERSION}-${ZONE}-start"


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Set workspace
        id: workspace
        run: |
          terraform workspace list
          echo -e "terraform {\n  backend \"remote\" {\n    organization = \"${ORGANIZATION}\"\n\n    workspaces {\n      name = \"${WORKSPACE}\"\n    }\n  }\n}" > workspace.tf
          cat workspace.tf

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: |
          echo "Terraform plan failed - see 'plan' step above for more details"
          git tag -a "${RELEASE_VERSION}-${ZONE}-failed" -m "Deployment start in learning environment" ${{ github.sha }}
          git push origin "${RELEASE_VERSION}-${ZONE}-failed"
          exit 1

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        continue-on-error: true

      - name: Terraform Apply Status
        if: steps.apply.outcome == 'failure'
        run: |
          echo "Terraform apply failed - see 'apply' step above for more details"
          git tag -a "${RELEASE_VERSION}-${ZONE}-failed" -m "Deployment start in learning environment" ${{ github.sha }}
          git push origin "${RELEASE_VERSION}-${ZONE}-failed"
          exit 1

      - name: Terraform Status
        run: |
          git tag -a "${RELEASE_VERSION}-${ZONE}-success" -m "Deployment start in learning environment" ${{ github.sha }}
          git push origin "${RELEASE_VERSION}-${ZONE}-success"


