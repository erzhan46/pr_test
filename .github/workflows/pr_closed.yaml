name: Pull request closed with or without merge

on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  reject:
    if: github.event.pull_request.merged != true
    runs-on: ubuntu-latest
    steps:
    # PR rejected - notify
      - run: |
          echo "PR rejected"

  merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 250
      - name: Git config
        run: |
          git config --global user.email "infra-pipeline@dh.com"
          git config --global user.name "Infrastructure Pipeline"
      - run: |
          echo "PR merged"
      - run: |
          git fetch --prune --tags origin
      - name: Get commits in PR
        id: get_commits
        run: |
          COMMIT_URL="${{ github.event.pull_request._links.commits.href }}?per_page=250"
          curl -s ${COMMIT_URL} -H "Authorization: token ${GITHUB_TOKEN}" | jq '.[].commit.message'
          COMMIT_LIST=$(curl -s ${COMMIT_URL} -H "Authorization: token ${GITHUB_TOKEN}" | jq '.[].sha')
          COMMIT_LIST="${COMMIT_LIST//'%'/'%25'}"
          COMMIT_LIST="${COMMIT_LIST//$'\n'/'%0A'}"
          COMMIT_LIST="${COMMIT_LIST//$'\r'/'%0D'}"
          echo "::set-output name=commits::${COMMIT_LIST}"
      - name: Get code version tag in scope of PR (latest/if any)
        id: get_latest_code_tag
        run: |
          TAGS=$(echo "${{ steps.get_commits.outputs.commits }}" | while read COMMIT; do git describe --tags --match="v[0-9]*\.[0-9]*\.[0-9]*" --exact-match  ${COMMIT} 2>/dev/null ||   true; done)
          echo "::set-output name=latest_code_tag::${TAGS}"
      - name: Get changed files
        id: get_changed_files
        run: |
          COMMIT_URL="${{ github.event.pull_request._links.commits.href }}?per_page=250"
          ARR=($(curl -s ${COMMIT_URL} -H "Authorization: token ${GITHUB_TOKEN}" | jq '.[].sha'))
          BASE_SHA=$(echo ${ARR[0]} | tr -d '"')
          HEAD_SHA=$(git rev-list -1 ${BASE_SHA}^1)
          DIFF=$(git diff --name-only ${HEAD_SHA} ${BASE_SHA})
          echo "Diff between ${BASE_SHA} and ${HEAD_SHA}"
          echo "$DIFF"
          DIFF="${DIFF//'%'/'%25'}"
          DIFF="${DIFF//$'\n'/'%0A'}"
          DIFF="${DIFF//$'\r'/'%0D'}"
          echo "::set-output name=files::${DIFF}"
      - name: Files scope
        id: files_scope
        run: |
          CODE_FILES=$(echo "${{ steps.get_changed_files.outputs.files }}" | while read FILE; do echo ${FILE}|grep "^code\/*" || true; done)
          echo "Code files:${CODE_FILES}"
          CODE_FILES="${CODE_FILES//'%'/'%25'}"
          CODE_FILES="${CODE_FILES//$'\n'/'%0A'}"
          CODE_FILES="${CODE_FILES//$'\r'/'%0D'}"
          echo "::set-output name=code_files::${CODE_FILES}"
          CONF_FILES=$(echo "${{ steps.get_changed_files.outputs.files }}" | while read FILE; do echo ${FILE}|grep "^config\/*" || true; done)
          echo "Configuration files:${CONF_FILES}"
          CONF_FILES="${CONF_FILES//'%'/'%25'}"
          CONF_FILES="${CONF_FILES//$'\n'/'%0A'}"
          CONF_FILES="${CONF_FILES//$'\r'/'%0D'}"
          echo "::set-output name=conf_files::${CONF_FILES}"
          WORKFLOW_FILES=$(echo "${{ steps.get_changed_files.outputs.files }}" | while read FILE; do echo ${FILE}|grep "^\.github\/workflows\/*" || true; done)
          echo "Workflow files:${WORKFLOW_FILES}"
          WORKFLOW_FILES="${WORKFLOW_FILES//'%'/'%25'}"
          WORKFLOW_FILES="${WORKFLOW_FILES//$'\n'/'%0A'}"
          WORKFLOW_FILES="${WORKFLOW_FILES//$'\r'/'%0D'}"
          echo "::set-output name=workflow_files::${WORKFLOW_FILES}"
      - run: |
          echo "latest code tag in current PR"
          echo ${{ steps.get_latest_code_tag.outputs.latest_code_tag }}
          echo "latest code tag overall"
          git describe --tags --match="v[0-9]*\.[0-9]*\.[0-9]*" $(git rev-list --tags="v[0-9]*\.[0-9]*\.[0-9]*" --max-count=1)
          echo "latest release tag overall"
          git describe --tags --match="release-[0-9]*\.[0-9]*\.[0-9]*" $(git rev-list --tags="release-[0-9]*\.[0-9]*\.[0-9]*" --max-count=1)
      - name: Tag Code changes
        id: tag_code_changes
        run: |
          if [[ -n "${{ steps.files_scope.outputs.code_files }}" ]]; then
            if [[ -z "${{ steps.get_latest_code_tag.outputs.latest_code_tag }}" ]]; then
              echo "Pull request should contain at least one commit with the version tag if code files are changed"
              echo "Files changed: ${{ steps.files_scope.outputs.code_files }}"
              exit 1
            else
              RELEASE_VERSION="${{ steps.get_latest_code_tag.outputs.latest_code_tag }}"
              RELEASE_VERSION="release-${RELEASE_VERSION#v}.0"
              echo "Merge commit contains code and will be tagged with: ${RELEASE_VERSION}"
              git tag -a -f "${RELEASE_VERSION}" -m "Deployment release ${RELEASE_VERSION}" ${{ github.sha }}
              git push -f origin "${RELEASE_VERSION}"
              git tag -a -f "code" -m "Deployment contain code changes" ${{ github.sha }}
              git push -f origin "code"
              echo "::set-output name=release_version::${RELEASE_VERSION}"
            fi
          fi
      - name: Tag configuration changes
        id: tag_config_changes
        run: |
          if [[ -n "${{ steps.files_scope.outputs.conf_files }}" ]]; then
            RELEASE_VERSION="${{ steps.tag_code_changes.outputs.release_version }}"
            if [[ -z "${RELEASE_VERSION}" ]]; then
              VERSION=${RELEASE_VERSION%\.[0-9]*}
              PREV_DEPLOYMENT=${RELEASE_VERSION#release-[0-9]*\.[0-9]*\.[0-9]*\.}
              DEPLOYMENT=$(expr ${PREV_DEPLOYMENT} + 1)
              RELEASE_VERSION="${VERSION}.${DEPLOYMENT}"
              git tag -a "${RELEASE_VERSION}" -m "Deployment release ${RELEASE_VERSION}" ${{ github.sha }}
              git push -f origin "${RELEASE_VERSION}"
            fi
            echo "Merge commit contains configuration and will be tagged with: ${RELEASE_VERSION}"
            git tag -a "config" -m "Deployment contain configuration changes" ${{ github.sha }}
            git push -f origin "config"
            echo "::set-output name=release_version::${RELEASE_VERSION}"
          fi
        # Need logic to check for environment targeted deployment
        # Logic for manual deployment tag move to merge? 
      - name: Tag for promotion start
        id: promotion_start
        run: |
          if [[ -n "${{ steps.tag_code_changes.outputs.release_version }}" || -n "${{ steps.tag_config_changes.outputs.release_version }}" ]]; then
            git tag -a -f "learning-start" -m "Deployment start in learning environment" ${{ github.sha }}
            git push -f origin "learning-start"
          fi



      # Tag release, 'learning-start'
      # Test message

  context-debug:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
        run: echo "$MATRIX_CONTEXT"


